---
description: 
globs: 
alwaysApply: true
---
# 项目开发规则

## 核心职责

作为项目开发助手，必须严格遵循以下规则，确保高质量的代码实现和功能开发：

## 框架与技术栈规范

### 开发环境
- **必须** 在每一次执行前先查看和菜单架构和路径说明 [菜单架构和路径说明.md](mdc:docment/菜单架构和路径说明.md) 、并在最后一次代码更新后、更新这个文件、确保按照对应的菜单创建文件生成、以及开发与更新文件也要及时更新，更新已解决的问题和未解决计划解决的问题 [开发与更新.md](mdc:docment/开发与更新.md)

### 前端技术栈
- **必须** 使用 TDesign Vue Next 组件库 "https://tdesign.tencent.com/vue-next/components/button?tab=api"查看组件api的网址、需要看其他组件直接把链接后面的button换成对应组件英文去搜索就可以
- **必须** 使用 Vue 3 框架及其相关生态
- **必须** 使用 TDesign Vue Next 官方脚手架初始化项目
- **必须** 遵循组件库的设计规范和API使用方式
- **必须** 采用 Vue 3 的 Composition API 编写组件
- **必须** 使用 TypeScript 定义所有类型，禁止使用 any 类型

### 后端技术栈
- **必须** 使用 Java 开发后端服务
- **必须** 使用 MySQL 作为数据库
- **必须** 遵循 RESTful API 设计规范

## 功能开发流程

### 项目路径
- 新项目路径：`C:\Users\HC.R\Desktop\chat\SRP\NSRP`
- 文档路径：`C:\Users\HC.R\Desktop\chat\SRP\docment`
- SQL文件路径：`C:\Users\HC.R\Desktop\chat\SRP\docment\sql`
- Mock路径：`C:\Users\HC.R\Desktop\chat\SRP\NSRP\RP\mock`

### 开发规则
1. **必须** 根据提供的需求文档 [功能需求.md](mdc:OLDRP/talent-program-system/功能需求.md) 直接开发功能
2. **必须** 在开发前完整分析 [功能需求.md](mdc:OLDRP/talent-program-system/功能需求.md)结构和业务逻辑
3. **必须** 将大型文件拆分为多个独立的小型文件，每个文件不超过300行
4. **必须** 为每个页面创建单独的文件夹
5. **严格禁止** 在单个文件中生成过多代码
6. **严格遵循** TDesign Vue Next 的组件使用规范
7. **必须** 所有的mock数据放在C:\Users\HC.R\Desktop\chat\SRP\NSRP\RP\mock路径下
8. **必须** 所有数据库建表和执行动作除了mock模拟外，还必须生成对应的sql执行文件，存放在`C:\Users\HC.R\Desktop\chat\SRP\docment\sql`路径下
9. **必须** 创建并更新菜单架构和路径说明文档
10. **必须** 每次生成文件前检查是否已存在对应文件，不可重复生成
11. **必须** 每次完成一个步骤后更新`C:\Users\HC.R\Desktop\chat\SRP\docment\开发与更新.md`文档

### 样式与组件使用
1. **必须** 自动查询 TDesign Vue Next 官方文档
2. **必须** 优先使用脚手架提供的原生组件，禁止重复造轮子
3. **必须** 使用 TDesign 提供的样式系统和主题变量
4. **严格禁止** 自定义与组件库冲突的样式
5. **必须** 使用组件库提供的布局系统（Grid、Layout、Space 等）
6. **必须** 在特殊样式需求时，使用组件库提供的定制主题功能
7. **必须** 严格按照 TDesign Vue Next 官方文档实现所有组件
8. **必须** 每次编写或修改组件前，先查询 TDesign Vue Next 的官方文档
9. **必须** 严格遵循 TDesign 的样式命名规范，避免样式冲突
10. **必须** 自定义样式必须使用 CSS Modules 或特定命名空间，避免全局污染


## 代码质量与规范

### 代码结构
1. **必须** 按功能模块组织代码，每个页面一个独立文件夹
2. **必须** 按照 MVC/MVVM 架构分离数据、视图和控制逻辑
3. **必须** 使用 Vue 3 的 Composition API 进行组件开发
4. **必须** 将公共组件抽离到独立目录下便于复用
5. **必须** 拆分超过300行的组件文件，将其分解为多个小型组件
6. **必须** 确保组件间的依赖关系清晰可追踪
7. **必须** 实现响应式设计，支持多种设备尺寸

### 命名规范
1. **必须** 使用有意义的变量名和函数名，严格禁止使用模糊缩写
2. **必须** 组件使用 PascalCase 命名法
3. **必须** 变量和函数使用 camelCase 命名法
4. **必须** 常量使用 UPPER_SNAKE_CASE 命名法
5. **必须** 文件夹和文件名反映其包含内容的功能

### 性能与安全
1. **必须** 实现适当的防抖和节流措施
2. **必须** 避免内存泄漏，合理使用响应式数据
3. **必须** 实现输入验证和数据清洗
4. **必须** 防范XSS攻击，对用户输入进行严格验证
5. **必须** 防范CSRF攻击，在关键操作中使用令牌验证
6. **必须** 使用 Vue Router 的路由守卫进行权限控制
7. **必须** 实现组件懒加载
8. **必须** 优化图片和资源加载
9. **必须** 实现虚拟滚动处理大量数据
10. **必须** 优化首屏加载时间
11. **必须** 避免不必要的DOM操作
12. **必须** 使用批量更新优化渲染性能
13. **必须** 实现适当的用户认证和授权机制

## 数据库访问规范

1. **必须** 使用参数化查询，防止SQL注入攻击
2. **必须** 进行适当的数据验证和清洗
4. **必须** 实现数据库连接池，避免频繁创建和销毁连接
6. **必须** 为所有数据库操作生成对应的SQL执行文件

## API与集成规范

1. **必须** 使用fetch API或axios进行HTTP请求
2. **必须** 实现适当的请求重试和超时机制
3. **必须** 处理所有可能的API响应状态
4. **必须** 实现API请求缓存，减少不必要的网络请求
5. **必须** 实现API响应数据的格式化和验证

